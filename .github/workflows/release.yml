name: Build and Release Modernizer

on:
  push:
    tags:
      - 'v*'  # e.g. v1.0, v2.0.1, etc.

jobs:
  build-windows:
    name: Build on Windows
    runs-on: windows-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt

      - name: Build with PyInstaller (Windows)
        # On Windows, PyInstaller uses ";" for --add-data
        run: pyinstaller --onefile --noconsole --add-data "settings.json;." modernizer.py

      - name: Rename and archive output
        run: |
          mkdir dist_output
          # PyInstaller places .exe in the "dist" folder
          move dist\modernizer.exe dist_output\modernizer-windows.exe

      - name: Upload artifact (Windows EXE)
        uses: actions/upload-artifact@v2
        with:
          name: windows-binary
          path: dist_output

  build-macos:
    name: Build on macOS
    runs-on: macos-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt

      - name: Build with PyInstaller (macOS)
        # On macOS/Linux, PyInstaller uses ":" for --add-data
        run: pyinstaller --onefile --noconsole --add-data "settings.json:." modernizer.py

      - name: Rename and archive output
        run: |
          mkdir dist_output
          # On macOS, PyInstaller places the binary as "modernizer" in "dist"
          mv dist/modernizer dist_output/modernizer-macos

      - name: Upload artifact (macOS binary)
        uses: actions/upload-artifact@v2
        with:
          name: mac-binary
          path: dist_output

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]

    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-binary

      - name: Download macOS artifact
        uses: actions/download-artifact@v2
        with:
          name: mac-binary

      - name: Create or Update Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-binary/dist_output/modernizer-windows.exe
          asset_name: modernizer-windows.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: mac-binary/dist_output/modernizer-macos
          asset_name: modernizer-macos
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
