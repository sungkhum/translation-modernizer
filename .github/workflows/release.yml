name: Build and Release

on:
  push:
    tags:
      - "v*"  # Trigger on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual trigger from GitHub Actions UI

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # Output the OS
      - name: Set OS output
        run: echo "os=${{ matrix.os }}" >> $GITHUB_ENV

      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Build the executable
      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --noconsole --add-data "settings.json:." modernizer.py

      # Verify the contents of the dist directory
      - name: Verify dist directory
        run: ls -R dist

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: modernizer-${{ matrix.os }}
          path: dist/*
          retention-days: 7

  build-m1:
    runs-on: macos-latest  # Or macos-13, macos-14, etc.
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
  
      # Set up Python virtual environment and install dependencies
      - name: Set up Python virtual environment
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
  
      # Build M1 binary
      - name: Build M1 binary
        run: |
          source .venv/bin/activate
          pyinstaller --onefile --noconsole --add-data "settings.json:." --name modernizer modernizer.py
  
      # Debug dist directory
      - name: Debug dist directory
        run: ls -R dist
  
      # Ensure dist directory and modernizer exist
      - name: Verify dist and modernizer
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory does not exist."
            exit 1
          fi
          if [ ! -f "dist/modernizer" ]; then
            echo "Error: modernizer file does not exist in dist."
            exit 1
          fi
  
      # Compress M1 macOS app
      - name: Compress M1 macOS app
        run: |
          mkdir -p artifacts/modernizer-m1-latest
          mv dist/modernizer artifacts/modernizer-m1-latest/modernizer.app
          cd artifacts/modernizer-m1-latest
          zip -r modernizer-macos-m1-latest.zip modernizer.app
  
      # Upload M1 artifact
      - name: Upload M1 artifact
        uses: actions/upload-artifact@v3
        with:
          name: modernizer-macos-m1-latest
          path: artifacts/modernizer-m1-latest/modernizer-macos-m1-latest.zip

  release:
    runs-on: ubuntu-latest
    needs: [build, build-m1]

    steps:
      # Download all build artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      # Verify downloaded artifacts
      - name: Verify downloaded artifacts
        run: ls -R artifacts

      # Create a compressed archive of the macOS Intel app
      - name: Compress macOS Intel app
        run: |
          cd artifacts/modernizer-macos-latest
          zip -r modernizer-macos-latest.zip modernizer.app

      # Create GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MYTOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Multi-platform release of Text Modernizer.
          draft: false
          prerelease: false

      # Upload macOS Intel artifact
      - name: Upload Release Asset (macOS Intel)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MYTOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modernizer-macos-latest/modernizer-macos-latest.zip
          asset_name: modernizer-macos-latest.zip
          asset_content_type: application/zip

      # Upload macOS M1 artifact
      - name: Upload Release Asset (macOS M1)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MYTOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modernizer-m1-latest/modernizer-macos-m1-latest.zip
          asset_name: modernizer-macos-m1-latest.zip
          asset_content_type: application/zip

      # Upload Ubuntu artifact
      - name: Upload Release Asset (Ubuntu)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MYTOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modernizer-ubuntu-latest/modernizer
          asset_name: modernizer-ubuntu-latest
          asset_content_type: application/octet-stream

      # Upload Windows artifact
      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MYTOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modernizer-windows-latest/modernizer.exe
          asset_name: modernizer-windows-latest.exe
          asset_content_type: application/octet-stream
