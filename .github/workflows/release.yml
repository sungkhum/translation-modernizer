name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.os }}
        uses: actions/setup-python@v3
        with:
          python-version: 3.x # You can specify a specific python version here
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build for ${{ matrix.os }}
        run: |
          if [[ ${{ runner.os }} == 'macos-latest' ]]; then
            pyinstaller --onefile --noconsole --add-data "settings.json:." modernizer.py
          elif [[ ${{ runner.os }} == 'windows-latest' ]]; then
            pyinstaller --onefile --noconsole --add-data "settings.json:." modernizer.py
          fi
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_id }} # Use run_id for unique tag
          draft: false
          prerelease: false
          name: Release ${{ matrix.os }} build
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*
          asset_name: modernizer_${{ runner.os }}.exe # Customize filename
          asset_content_type: application/octet-stream