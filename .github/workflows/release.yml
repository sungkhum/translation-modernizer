name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, 3.10]
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          pyinstaller --onefile --noconsole --add-data "settings.json;." modernizer.py
        elif [[ "${{ runner.os }}" == "macOS" && "${{ matrix.arch }}" == "arm64" ]]; then
          arch -arm64 pyinstaller --onefile --noconsole --add-data "settings.json:." modernizer.py
        else
          pyinstaller --onefile --noconsole --add-data "settings.json:." modernizer.py

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }}-${{ matrix.arch }}
        path: dist/modernizer*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Automatically generated release for version ${{ github.ref_name }}.
        draft: false
        prerelease: false

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/modernizer*
        asset_name: ${{ runner.os }}-${{ matrix.arch }}-modernizer
        asset_content_type: application/octet-stream
