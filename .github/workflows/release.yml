name: Build and Release

on:
  push:
    tags:
      - "v*"  # Trigger on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual trigger from GitHub Actions UI

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: modernizer-ubuntu-latest
            build_name: modernizer
          - os: windows-latest
            artifact_name: modernizer-windows-latest
            build_name: modernizer.exe
          - os: macos-latest    # Intel macOS
            artifact_name: modernizer-macos-intel-latest
            build_name: modernizer
          - os: macos-14       # ARM macOS (M1/M2+)
            artifact_name: modernizer-macos-arm-latest
            build_name: modernizer

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Build the executable
      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --noconsole --add-data "settings.json:." modernizer.py

      # Debug dist directory
      - name: Debug dist directory
        run: ls -R dist

      # For macOS, rename the PyInstaller output to .app or whatever your convention
      - name: Rename macOS binary
        if: startsWith(matrix.os, 'macos')
        run: |
          # For example, rename `modernizer` to `modernizer.app`
          mv dist/modernizer dist/${{ matrix.build_name }}.app

      # Zip the macOS artifact if desired
      - name: Zip Mac artifact
        if: startsWith(matrix.os, 'macos')
        run: |
          mkdir -p artifacts/${{ matrix.artifact_name }}
          mv dist/${{ matrix.build_name }}.app artifacts/${{ matrix.artifact_name }}
          cd artifacts/${{ matrix.artifact_name }}
          zip -r ${{ matrix.artifact_name }}.zip ${{ matrix.build_name }}.app

      # For Linux and Windows, just move the file (and rename on Windows if needed)
      - name: Prepare Linux/Windows artifact
        if: (matrix.os == 'ubuntu-latest' || matrix.os == 'windows-latest')
        run: |
          mkdir -p artifacts/${{ matrix.artifact_name }}
          # If on Windows, the file is modernizer.exe, otherwise it's modernizer
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv dist/modernizer.exe artifacts/${{ matrix.artifact_name }}/${{ matrix.build_name }}
          else
            mv dist/modernizer artifacts/${{ matrix.artifact_name }}/${{ matrix.build_name }}
          fi

      # Upload artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/${{ matrix.artifact_name }}
          retention-days: 7

  release:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Verify downloaded artifacts
        run: ls -R artifacts

      # You can optionally re-zip or rename inside these steps before uploading to GitHub Release
      # Adjust these steps as you see fit to match your naming conventions

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MYTOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Multi-platform release of Text Modernizer.
          draft: false
          prerelease: false

      - name: Upload Release Asset (macOS Intel)
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MYTOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modernizer-macos-intel-latest/modernizer-macos-intel-latest.zip
          asset_name: modernizer-macos-intel-latest.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (macOS ARM)
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MYTOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modernizer-macos-arm-latest/modernizer-macos-arm-latest.zip
          asset_name: modernizer-macos-arm-latest.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (Ubuntu)
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MYTOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modernizer-ubuntu-latest/modernizer
          asset_name: modernizer-ubuntu-latest
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Windows)
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MYTOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/modernizer-windows-latest/modernizer.exe
          asset_name: modernizer-windows-latest.exe
          asset_content_type: application/octet-stream
