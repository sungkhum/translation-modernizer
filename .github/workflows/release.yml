name: Build

on:
  push:
    tags:
      - 'v*'

jobs:
  createrelease:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Output Release URL File
        run: |
          mkdir -p release_url
          echo "${{ steps.create_release.outputs.upload_url }}" > release_url/release_url.txt

      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url

  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
                pyinstaller -F -w -n modernizer-Mac-x64 --add-data "settings.json:." modernizer.py &&
                cd dist/ &&
                zip -r9 modernizer-Mac-x64 modernizer-Mac-x64.app/
            OUT_FILE_NAME: modernizer-Mac-x64.zip
            ASSET_MIME: application/zip
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller -F -w -n modernizer-${{ github.ref_name }}-Win-x64 --add-data "settings.json:." modernizer.py
            OUT_FILE_NAME: modernizer-${{ github.ref_name }}-Win-x64.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
          - os: ubuntu-latest
            TARGET: linux
            CMD_BUILD: pyinstaller -F -n modernizer-${{ github.ref_name }}-Linux-x64 --add-data "settings.json:." modernizer.py
            OUT_FILE_NAME: modernizer-${{ github.ref_name }}-Linux-x64
            ASSET_MIME: application/zip

    steps:
      - uses: actions/checkout@v1
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: 3.12
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt     
      
      - name: Install PyInstaller
        run: pip install pyinstaller   
      
      - name: Build with pyinstaller for ${{ matrix.TARGET }}
        run: ${{ matrix.CMD_BUILD }}
      
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v4
        with:
          name: release_url
          path: ./artifact
      
      - name: Debug Release URL File
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem artifact
            Get-Content artifact/release_url.txt || Write-Output "File not found!"
          else
            ls -la artifact
            cat artifact/release_url.txt || echo "File not found!"
          fi
        shell: bash
      
      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          if [[ -f "artifact/release_url.txt" ]]; then
            value=$(cat artifact/release_url.txt)
            echo ::set-output name=upload_url::$value
          else
            echo "Error: release_url.txt not found"
            exit 1
          fi        
      
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME }}
          asset_name: ${{ matrix.OUT_FILE_NAME }}
          asset_content_type: ${{ matrix.ASSET_MIME }}
